/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@pixi-essentials/cull/lib/cull.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@pixi-essentials/cull/lib/cull.es.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Cull\": () => (/* binding */ Cull)\n/* harmony export */ });\n/* harmony import */ var _pixi_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/math */ \"./node_modules/@pixi/math/dist/esm/math.mjs\");\n/* eslint-disable */\n \n/*!\n * @pixi-essentials/cull - v1.0.12\n * Compiled Wed, 17 Mar 2021 16:10:19 UTC\n *\n * @pixi-essentials/cull is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n * \n * Copyright 2019-2020, Shukant Pal <shukantpal@outlook.com>, All Rights Reserved\n */\n\n\nconst tempRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_0__.Rectangle();\n\n/**\n * The culling options for {@code Cull}.\n *\n * @ignore\n * @public\n */\n\n\n\n\n\n\n/**\n * Provides a simple, configurable mechanism for culling a subtree of your scene graph.\n *\n * If your scene graph is not static, culling needs to be done before rendering. You\n * can run it on the `prerender` event fired by the renderer.\n *\n * @public\n */\nclass Cull\n{\n    \n    \n    \n\n    /**\n     * @param options\n     * @param [options.recursive] - whether culling should be recursive\n     * @param [options.toggle='renderable'] - which property of display-object was be set to indicate\n     *      its culling state. It should be one of `renderable`, `visible`.\n     */\n    constructor(options = {})\n    {\n        this._recursive = typeof options.recursive === 'boolean' ? options.recursive : true;\n        this._toggle = options.toggle || 'visible';\n        this._targetList = new Set();\n    }\n\n    /**\n     * Adds a display-object to the culling list\n     *\n     * @param target - the display-object to be culled\n     * @return this\n     */\n    add(target)\n    {\n        this._targetList.add(target);\n\n        return this;\n    }\n\n    /**\n     * Adds all the display-objects to the culling list\n     *\n     * @param targets - the display-objects to be culled\n     * @return this\n     */\n    addAll(targets)\n    {\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this._targetList.add(targets[i]);\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the display-object from the culling list\n     *\n     * @param target - the display-object to be removed\n     * @return this\n     */\n    remove(target)\n    {\n        this._targetList.delete(target);\n\n        return this;\n    }\n\n    /**\n     * Removes all the passed display-objects from the culling list\n     *\n     * @param targets - the display-objects to be removed\n     * @return this\n     */\n    removeAll(targets)\n    {\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this._targetList.delete(targets[i]);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clears the culling list\n     *\n     * @return this\n     */\n    clear()\n    {\n        this._targetList.clear();\n\n        return this;\n    }\n\n    /**\n     * @param rect - the rectangle outside of which display-objects should be culled\n     * @param skipUpdate - whether to skip unculling, transform update, bounds calculation. It is\n     *  highly recommended you enable this by calling _this.uncull()_ and _root.getBounds(false)_ manually\n     *  before your render loop.\n     * @return this\n     */\n    cull(rect, skipUpdate = false)\n    {\n        if (!skipUpdate)\n        {\n            this.uncull();\n        }\n\n        this._targetList.forEach((target) =>\n        {\n            if (!skipUpdate)\n            {\n                // Update transforms, bounds of display-objects in this target's subtree\n                target.getBounds(false, tempRect);\n            }\n\n            if (this._recursive)\n            {\n                this.cullRecursive(rect, target, skipUpdate);\n            }\n            else\n            {\n                // NOTE: If skipUpdate is false, then tempRect already contains the bounds of the target\n                if (skipUpdate)\n                {\n                    target._bounds.getRectangle(rect);\n                }\n\n                target[this._toggle] = tempRect.right > rect.left\n                    && tempRect.left < rect.right\n                    && tempRect.bottom > rect.top\n                    && tempRect.top < rect.bottom;\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets all display-objects to the unculled state.\n     *\n     * This happens regardless of whether the culling toggle was set by {@code this.cull} or manually. This\n     * is why it is recommended to one of `visible` or `renderable` for normal use and the other for culling.\n     *\n     * @return this\n     */\n    uncull()\n    {\n        this._targetList.forEach((target) =>\n        {\n            if (this._recursive)\n            {\n                this.uncullRecursive(target);\n            }\n            else\n            {\n                target[this._toggle] = false;\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Recursively culls the subtree of {@code displayObject}.\n     *\n     * @param rect - the visiblity rectangle\n     * @param displayObject - the root of the subtree to cull\n     * @param skipUpdate - whether to skip bounds calculation. However, transforms are expected to be updated by the caller.\n     */\n     cullRecursive(rect, displayObject, skipUpdate)\n    {\n        // NOTE: getBounds can skipUpdate because updateTransform is invoked before culling.\n        const bounds = skipUpdate\n            ? displayObject._bounds.getRectangle(tempRect)\n            : displayObject.getBounds(true, tempRect);\n\n        displayObject[this._toggle] = bounds.right > rect.left\n            && bounds.left < rect.right\n            && bounds.bottom > rect.top\n            && bounds.top < rect.bottom;\n\n        const fullyVisible = bounds.left >= rect.left\n            && bounds.top >= rect.top\n            && bounds.right <= rect.right\n            && bounds.bottom <= rect.bottom;\n\n        // Only cull children if this display-object is *not* fully-visible. It is expected that the bounds\n        // of children lie inside of its own. Hence, further culling is only required if the display-object\n        // intersects with the boundaries of \"rect\". Otherwise, if the object is fully outside/inside the\n        // screen, the children don't need to be evaluated as they are presumed to be unculled.\n        if (!fullyVisible\n                && displayObject[this._toggle]\n                && (displayObject ).children\n                && (displayObject ).children.length)\n        {\n            const children = (displayObject ).children;\n\n            for (let i = 0, j = children.length; i < j; i++)\n            {\n                this.cullRecursive(rect, children[i]);\n            }\n        }\n    }\n\n    /**\n     * Recursively unculls the subtree of {@code displayObject}.\n     *\n     * @param displayObject\n     */\n     uncullRecursive(displayObject)\n    {\n        displayObject[this._toggle] = true;\n\n        if ((displayObject ).children && (displayObject ).children.length)\n        {\n            const children = (displayObject ).children;\n\n            for (let i = 0, j = children.length; i < j; i++)\n            {\n                this.uncullRecursive(children[i]);\n            }\n        }\n    }\n}\n\n\n//# sourceMappingURL=cull.es.js.map\n\n\n//# sourceURL=webpack://sv-editor2/./node_modules/@pixi-essentials/cull/lib/cull.es.js?");

/***/ }),

/***/ "./parser.js":
/*!*******************!*\
  !*** ./parser.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_Notes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/Notes.mjs */ \"./modules/Notes.mjs\");\n/* harmony import */ var _modules_codecs_osuCodec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/codecs/osuCodec.mjs */ \"./modules/codecs/osuCodec.mjs\");\n\n\n// console.log(osu);\n\n// PIXI setup\n/*PIXI.BitmapFont.from('Arial', {\n  fontName: \"Arial\",\n  fontSize: 12,\n  chars: [['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[],.<>/ \"],\n});*/\n\n// folder input\n(() => {\n  let inputFile = document.getElementById('folder');\n  let selectFile;\n  inputFile.addEventListener('change', (event) => {\n    // console.log(event.srcElement.files);\n    const files = Array.from(event.target.files);\n    if(files.length > 0){\n      selectFile?.remove();\n      // create a secondary select element to select the specific difficulty of\n      // the beatmap that we want to edit\n      selectFile = document.createElement('select');\n      let defaultOption = document.createElement('option');\n      defaultOption.innerText = '(select a file)';\n      selectFile.append(defaultOption);\n      files.forEach((file, i) => {\n        if(file.name.endsWith('.osu')){\n          const option = document.createElement('option');\n          option.value = i;\n          option.innerText = file.name;\n          selectFile.append(option);\n        }\n      });\n      selectFile.addEventListener('change', () => {\n        // console.log(selectFile.value);\n        const file = files[selectFile.value];\n        const reader = new FileReader();\n        reader.addEventListener('load', () => {\n          let _start = performance.now();\n          const data = reader.result;\n          const proj = _modules_codecs_osuCodec_mjs__WEBPACK_IMPORTED_MODULE_1__.decode(data);\n          proj.loadResources(files);\n          console.log(proj);\n          project = proj; // expose to global scope\n          project.codec = _modules_codecs_osuCodec_mjs__WEBPACK_IMPORTED_MODULE_1__; // expose more stuff to global scope\n          console.log(0|(performance.now()-_start), \"ms file load time\");\n          _start = performance.now();\n          project.openEditor();\n          console.log(0|(performance.now()-_start), \"ms to open editor\");\n        });\n        reader.readAsText(file);\n        document.getElementById(\"loader\").style.display = \"none\";\n        // selectFile.remove();\n        // inputFile.remove();\n      });\n      document.getElementById(\"loader\").append(selectFile);\n    }\n  });\n})();\n\n// zip file input\n(() => {\n  let inputFile = document.getElementById('zip');\n  let selectFile;\n  inputFile.addEventListener('change', async (event) => {\n    // console.log(event.srcElement.files);\n    const zipfile = event.target.files[0];\n    if (!zipfile) {\n      return;\n    }\n    // if we successfully loaded the zip, use jszip to unpack files\n    // see https://stuk.github.io/jszip/documentation/examples/read-local-file-api.html\n    try {\n      selectFile?.remove();\n      // create a secondary select element to select the specific difficulty of\n      // the beatmap that we want to edit\n      {\n        selectFile = document.createElement('select');\n        let defaultOption = document.createElement('option');\n        defaultOption.innerText = '(select a file)';\n        selectFile.append(defaultOption);\n      }\n\n      const jsZip = await JSZip.loadAsync(zipfile);\n\n      jsZip\n        .filter((_, file) => file.name.endsWith('.osu'))\n        .forEach((file) => {\n          const option = document.createElement('option');\n          // we can use name to access the dictionary instead of an index\n          // console.log(relativePath, zipEntry);\n          option.value = file.name;\n          option.innerText = file.name;\n          selectFile.append(option);\n        });\n\n      // when the selected file is changed\n      selectFile.addEventListener('change', async () => {\n        // console.log(selectFile.value);\n        const file = jsZip.files[selectFile.value];\n        // console.log(file)\n        // console.log('file stuff', file);\n\n        let _start = performance.now();\n        const data = await file.async('text');\n        // console.log(data);\n        const proj = _modules_codecs_osuCodec_mjs__WEBPACK_IMPORTED_MODULE_1__.decode(data);\n        // console.log(Array.from(zip.files));\n        await proj.loadResourcesZip(jsZip);\n        console.log(proj);\n        project = proj; // expose to global scope\n        project.codec = _modules_codecs_osuCodec_mjs__WEBPACK_IMPORTED_MODULE_1__; // expose more stuff to global scope\n        console.log(0|(performance.now()-_start), \"ms file load time\");\n        _start = performance.now();\n        project.openEditor();\n        console.log(0|(performance.now()-_start), \"ms to open editor\");\n\n        document.getElementById(\"loader\").style.display = \"none\";\n      });\n      document.getElementById(\"loader\").append(selectFile);\n    } catch (e) {\n      console.error(e);\n    }\n  });\n})();\n\n(() => {\n  const rad = document.getElementsByClassName(\"fileType\");\n  for (let i = 0; i < rad.length; i++) {\n    rad[i].addEventListener(\"change\", () => {\n      if (rad[i].value === \"folder\") {\n        document.getElementById(\"zipSelector\").style.display = \"none\";\n        document.getElementById(\"folderSelector\").style.display = \"block\";\n      } else {\n        document.getElementById(\"zipSelector\").style.display = \"block\";\n        document.getElementById(\"folderSelector\").style.display = \"none\";\n      }\n    });\n  }\n})();\n\n\n//# sourceURL=webpack://sv-editor2/./parser.js?");

/***/ }),

/***/ "./modules/Function.mjs":
/*!******************************!*\
  !*** ./modules/Function.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Function\": () => (/* binding */ Function),\n/* harmony export */   \"Functions\": () => (/* binding */ Functions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// its literally a function\n\nclass Function {\n  // Square, Sine, Cosine, Triangle\n  // static Quadratic = new EasingFunction(\"Quadratic\", (x, y=x, t=0) => x+(y-x)*(t**2));\n  constructor(name, extraParameters, f, g){\n    this.name = name;\n    this.id = Symbol(name);\n    this.parameterNames = [\"t0\", \"x0\", ...extraParameters];\n    // this.parameters = this.parameterNames.map(x => 0);\n    this.func = f;\n    this.getDetails = g;\n  }\n  getLabel(params){\n    return this.getDetails(...params);\n  }\n  generateParameters(){\n    return this.parameterNames.map(x => 0);\n  }\n  evaluate(t){\n    return this.func(...arguments);\n  }\n  isConstant(){\n    return this.name === \"Constant\";\n  }\n}\n\nconst Functions = {\n  Constant: new Function(\"Constant\", [],\n    (t, t0, x0) => x0,\n    (t0, x0) => `${x0.toPrecision(2)}`),\n  Linear: new Function(\"Linear\", [\"x1\", \"x2\"],\n    (t, t0, x0, x, y) => (x0+x*(1-t)+y*t),\n    (t0, x0, x, y) => `${(x+x0).toPrecision(2)} to ${(y+x0).toPrecision(2)}`),\n};\nObject.entries(Functions).forEach(([name, func]) => {\n  Object.defineProperty(Function, name, {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: func\n  });\n});\n\n/*\nTODO: n point splines ??\nhttps://github.com/Pomax/bezierjs/blob/master/dist/bezier.cjs\nhttps://gist.github.com/nicholaswmin/c2661eb11cad5671d816\n*/\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Function);\n\n\n//# sourceURL=webpack://sv-editor2/./modules/Function.mjs?");

/***/ }),

/***/ "./modules/LongNote.mjs":
/*!******************************!*\
  !*** ./modules/LongNote.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LongNote\": () => (/* binding */ LongNote),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Note_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Note.mjs */ \"./modules/Note.mjs\");\n\n\nclass LongNote extends _Note_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(x=0, t=0, endTime=1000){\n    super(x, t);\n    this.t$ = endTime; // using end anchor notation from regex for \"end time\"\n  }\n  getEnd(){\n    return this.t$;\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LongNote);\n\n\n\n//# sourceURL=webpack://sv-editor2/./modules/LongNote.mjs?");

/***/ }),

/***/ "./modules/Note.mjs":
/*!**************************!*\
  !*** ./modules/Note.mjs ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Note\": () => (/* binding */ Note),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Note {\n  constructor(x=0, t=0){\n    this.x = x;\n    this.t = t;\n    // this.hs = 0;\n    // this.sample\n  }\n  getStart(){\n    return this.t;\n  }\n  getEnd(){\n    return this.t;\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Note);\n\n\n\n//# sourceURL=webpack://sv-editor2/./modules/Note.mjs?");

/***/ }),

/***/ "./modules/Notes.mjs":
/*!***************************!*\
  !*** ./modules/Notes.mjs ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LongNote\": () => (/* reexport safe */ _LongNote_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   \"Note\": () => (/* reexport safe */ _Note_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   \"SvBlock\": () => (/* reexport safe */ _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _Note_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Note.mjs */ \"./modules/Note.mjs\");\n/* harmony import */ var _LongNote_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LongNote.mjs */ \"./modules/LongNote.mjs\");\n/* harmony import */ var _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SvBlock.mjs */ \"./modules/SvBlock.mjs\");\n\n\n\n\n\n\n\n//# sourceURL=webpack://sv-editor2/./modules/Notes.mjs?");

/***/ }),

/***/ "./modules/OutlineFilter.mjs":
/*!***********************************!*\
  !*** ./modules/OutlineFilter.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OutlineFilter\": () => (/* binding */ OutlineFilter)\n/* harmony export */ });\n/*!\n * @pixi/filter-outline - v4.2.0\n * Compiled Fri, 05 Aug 2022 19:53:35 UTC\n *\n * @pixi/filter-outline is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nconst {Filter} = PIXI; // import { Filter } from '@pixi/core';\nconst {rgb2hex, hex2rgb} = PIXI.utils; // import { rgb2hex, hex2rgb } from '@pixi/utils';\n\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) { if (Object.prototype.hasOwnProperty.call(b, p)) { d[p] = b[p]; } } };\n    return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform vec2 thickness;\\nuniform vec4 outlineColor;\\nuniform vec4 filterClamp;\\n\\nconst float DOUBLE_PI = 3.14159265358979323846264 * 2.;\\n\\nvoid main(void) {\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float maxAlpha = 0.;\\n    vec2 displaced;\\n    for (float angle = 0.; angle <= DOUBLE_PI; angle += ${angleStep}) {\\n        displaced.x = vTextureCoord.x + thickness.x * cos(angle);\\n        displaced.y = vTextureCoord.y + thickness.y * sin(angle);\\n        curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\\n        maxAlpha = max(maxAlpha, curColor.a);\\n    }\\n    float resultAlpha = max(maxAlpha, ownColor.a);\\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\\n}\\n\";\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/outline.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-outline|@pixi/filter-outline}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters} *\n * @example\n *  someSprite.filters = [new OutlineFilter(2, 0x99ff99)];\n */\nvar OutlineFilter = /** @class */ (function (_super) {\n    __extends(OutlineFilter, _super);\n    /**\n     * @param {number} [thickness=1] - The tickness of the outline. Make it 2 times more for resolution 2\n     * @param {number} [color=0x000000] - The color of the outline.\n     * @param {number} [quality=0.1] - The quality of the outline from `0` to `1`, using a higher quality\n     *        setting will result in slower performance and more accuracy.\n     */\n    function OutlineFilter(thickness, color, quality) {\n        if (thickness === void 0) { thickness = 1; }\n        if (color === void 0) { color = 0x000000; }\n        if (quality === void 0) { quality = 0.1; }\n        var _this = _super.call(this, vertex, fragment.replace(/\\$\\{angleStep\\}/, OutlineFilter.getAngleStep(quality))) || this;\n        _this._thickness = 1;\n        _this.uniforms.thickness = new Float32Array([0, 0]);\n        _this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);\n        Object.assign(_this, { thickness: thickness, color: color, quality: quality });\n        return _this;\n    }\n    /**\n     * Get the angleStep by quality\n     * @private\n     */\n    OutlineFilter.getAngleStep = function (quality) {\n        var samples = Math.max(quality * OutlineFilter.MAX_SAMPLES, OutlineFilter.MIN_SAMPLES);\n        return (Math.PI * 2 / samples).toFixed(7);\n    };\n    OutlineFilter.prototype.apply = function (filterManager, input, output, clear) {\n        this.uniforms.thickness[0] = this._thickness / input._frame.width;\n        this.uniforms.thickness[1] = this._thickness / input._frame.height;\n        filterManager.applyFilter(this, input, output, clear);\n    };\n    Object.defineProperty(OutlineFilter.prototype, \"color\", {\n        /**\n         * The color of the glow.\n         * @default 0x000000\n         */\n        get: function () {\n            return rgb2hex(this.uniforms.outlineColor);\n        },\n        set: function (value) {\n            hex2rgb(value, this.uniforms.outlineColor);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(OutlineFilter.prototype, \"thickness\", {\n        /**\n         * The thickness of the outline.\n         * @default 1\n         */\n        get: function () {\n            return this._thickness;\n        },\n        set: function (value) {\n            this._thickness = value;\n            this.padding = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** The minimum number of samples for rendering outline. */\n    OutlineFilter.MIN_SAMPLES = 1;\n    /** The maximum number of samples for rendering outline. */\n    OutlineFilter.MAX_SAMPLES = 100;\n    return OutlineFilter;\n}(Filter));\n\n\n//# sourceMappingURL=filter-outline.esm.mjs.map\n\n\n//# sourceURL=webpack://sv-editor2/./modules/OutlineFilter.mjs?");

/***/ }),

/***/ "./modules/PFunc.mjs":
/*!***************************!*\
  !*** ./modules/PFunc.mjs ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Function\": () => (/* reexport safe */ _Function_mjs__WEBPACK_IMPORTED_MODULE_0__.Function),\n/* harmony export */   \"PFunc\": () => (/* binding */ PFunc),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Function_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.mjs */ \"./modules/Function.mjs\");\n/* harmony import */ var _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PIXIRendering.mjs */ \"./modules/PIXIRendering.mjs\");\n/* harmony import */ var _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SvBlock.mjs */ \"./modules/SvBlock.mjs\");\n\n\n\n\nclass PFuncEditor {\n  constructor(linked, renderedSvBlock, projectEditor){\n    this.linked = linked;\n    this.renderedSvBlock = renderedSvBlock;\n    this.projectEditor = projectEditor;\n    this.snapToNearestLine = true;\n\n    this.htmlElement = document.createElement(\"div\");\n    this.htmlElement.style = `position: absolute; background: #f3f3ed80`;\n    const buttonMove = document.createElement(\"button\");\n    this.x = 0;\n    this.y = 0;\n    buttonMove.innerText = this.linked.getLabel();\n    buttonMove.addEventListener('mousedown', e => {\n      let {screenX, screenY} = e;\n      document.body.addEventListener('mouseup', e => {\n        this.setPosition(this.x + e.screenX - screenX, this.y + e.screenY - screenY);\n      }, {once: true});\n    });\n    const buttonClose = document.createElement(\"button\");\n    buttonClose.innerText = 'x';\n    buttonClose.style.background = 'red';\n    buttonClose.addEventListener('click', () => {\n      this.linked.closeEditor();\n    }, {once: true});\n\n    const [config, operation, functionFamily] = [...new Array(3)].map(() => document.createElement('div'));\n\n    const operationInput = document.createElement('select');\n    Object.entries(_SvBlock_mjs__WEBPACK_IMPORTED_MODULE_2__.SvBlock.Operation).forEach(([operationName, operation]) => {\n      const option = document.createElement('option'); // TODO: move PFuncEditor into SvBlockEditor or some mix, this feels a bit too scuffed\n      option.selected = operation === renderedSvBlock.linked.operation;\n      option.innerText = operationName.toLowerCase();\n      option.value = operationName;\n      operationInput.append(option);\n    });\n    operationInput.addEventListener('change', () => {\n      renderedSvBlock.linked.operation = _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_2__.SvBlock.Operation[operationInput.value];\n      this.refresh();\n    });\n\n    const [operationLabel, functionFamilyLabel] = [...new Array(2)].map(() => document.createElement('span'));\n    operationLabel.innerText = \"Operation\";\n    functionFamilyLabel.innerText = \"Function\";\n\n    operation.append(operationLabel, operationInput);\n    const functionFamilyInput = document.createElement('select');\n    Object.entries(_Function_mjs__WEBPACK_IMPORTED_MODULE_0__.Functions).forEach(([functionName, func]) => {\n      const option = document.createElement('option');\n      option.selected = func === this.function;\n      option.innerText = functionName;\n      option.value = functionName;\n      functionFamilyInput.append(option);\n    });\n    functionFamilyInput.addEventListener('change', () => {\n      this.linked.function = _Function_mjs__WEBPACK_IMPORTED_MODULE_0__.Functions[functionFamilyInput.value];\n      this.linked.params = Object.assign(this.linked.function.generateParameters(), this.linked.params);\n      this.updateSliders(sliders);\n    });\n    functionFamily.append(functionFamilyLabel, functionFamilyInput);\n    config.append(operation, functionFamily);\n\n    const sliders = document.createElement('div');\n    this.updateSliders(sliders);\n\n    this.htmlElement.append(buttonMove, buttonClose, config, sliders);\n    document.body.append(this.htmlElement);\n  }\n  destroy(){\n    // this.app.destroy(true);\n    this.htmlElement.remove();\n  }\n  updateSliders(slidersDiv){\n    slidersDiv.replaceChildren();\n    this.linked.function.parameterNames.forEach((name, i) => {\n      const div = document.createElement('div');\n      div.classList.add('parameter');\n      const label = document.createElement('span');\n      label.classList.add('parameter_name');\n      label.innerText = name;\n      const [slider, textarea] = [... new Array(2)].map(() => document.createElement('input'));\n      slider.classList.add('parameter_range');\n      slider.type = \"range\";\n      slider.min = \"-4\";\n      slider.max = \"4\";\n      slider.step = \"0.01\";\n      slider.value = textarea.value = this.linked.params[i];\n      slider.addEventListener('input', () => {\n        this.linked.params[i] = textarea.value = slider.valueAsNumber;\n        this.refresh();\n      });\n      textarea.classList.add('parameter_field');\n      textarea.addEventListener('change', () => {\n        if(isNaN(+textarea.value)) textarea.value = slider.value;\n      })\n      textarea.addEventListener('input', () => {\n        if(!isNaN(+textarea.value)){\n          this.linked.params[i] = slider.value = +textarea.value;\n          this.refresh();\n        }\n      })\n      div.append(label, slider, textarea);\n      slidersDiv.append(div);\n    });\n    this.refresh();\n  }\n  refresh(){\n    this.renderedSvBlock.render(); // TODO : setup delay to avoid consecutive rerender\n  }\n  setPosition(x, y){\n    this.htmlElement.style.left = (this.x = x) + \"px\";\n    this.htmlElement.style.top = (this.y = y) + \"px\";\n  }\n}\n\n// piecewise function (desmos would be pretty cool except i have some weird operations that not sure if i can define well)\nclass PFunc {\n  constructor(parent){\n    this.function = _Function_mjs__WEBPACK_IMPORTED_MODULE_0__.Function.Constant;\n    this.params = this.function.generateParameters();\n    this.editor = null;\n    this.linked = parent;\n  }\n  isConstant(){\n    return this.function.isConstant();\n  }\n  getLabel(){\n    return this.function.getLabel(this.params);\n  }\n  integrate(a, b){\n    // do desmos stuff here maybe\n    let sum = 0;\n    for(let t = a; t < b; t ++) sum += Math.min(evaluate(t), 1e6*1e4);\n    return sum;\n  }\n  evaluate(t){\n    return this.function.evaluate(t, ...this.params);\n  }\n  *range(start=0, end=this.linked.duration){\n    throw 'not implemented';\n    let i = 0;\n    let t = start;\n    while(t < end){\n      while(this.nodes[i+1] && this.nodes[i+1].t <= t) i ++;\n      yield [t, this.nodes[i].easing.func(this.nodes[i].x, this.nodes[i+1]?.x, (t-this.nodes[i].t)/(this.nodes[i+1]?.t-this.nodes[i].t)), (this.nodes[i+1]?.t||this.linked.duration) - this.nodes[i].t];\n      t++; // i cant believe i forgot this line the first time and didnt notice it... smh infinite generator loop\n    }\n  }\n  openEditor(renderedSvBlock, baseEditor){ // why look for a framework or library when you can do it yourself ... it's a cool exercise tho\n    // throw 'not implemented';\n    if(this.editor) throw 'pfunc editor already opened';\n    this.editor = new PFuncEditor(this, renderedSvBlock, baseEditor);\n    /*if(baseEditor){\n      this.editor.setTime(baseEditor.t);\n      this.editor.setTimeScale(baseEditor.z);\n    }*/\n  }\n  closeEditor(){\n    this.editor?.destroy();\n    this.editor = null;\n  }\n  set(args){\n    for(const k in this.params) this.params[k] = args[k] || 0;\n  }\n  update(args){\n    for(const k in this.params) this.params[k] = k in args ? args[k] : this.params[k];\n  }\n  toLatex(){\n    throw 'not implemented';\n    // for desmos calculations ~~cuz numerical piecewise is terrible for performance~~ (or maybe misusing yield?, yes turned out to be misuing yield)\n    // f\\left(x\\right)=\\left\\{0<x<1:4,1<x<2:3\\right\\}\n    let piecewise = \"\";\n    for(let i = 0; i < this.nodes.length; i ++){\n      const node = this.nodes[i];\n      const end = this.nodes[i+1]?.t||this.linked.duration;\n      piecewise += `${(node.t/1000).toFixed(3)}<x\\\\le${(end/1000).toFixed(3)}:${Math.min(30, node.x).toFixed(2)},`;\n    }\n    return `f\\\\left(x\\\\right)=\\\\left\\\\{${piecewise.replace(/,$/, '')}\\\\right\\\\}`;\n  }\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PFunc);\n\n\n//# sourceURL=webpack://sv-editor2/./modules/PFunc.mjs?");

/***/ }),

/***/ "./modules/PIXIRenderedSprites.mjs":
/*!*****************************************!*\
  !*** ./modules/PIXIRenderedSprites.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SpriteRenderer\": () => (/* binding */ SpriteRenderer),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\nclass SpriteRenderer {\n  constructor(app){\n    const g = new PIXI.Graphics();\n    g.beginFill(0x0077e6);\n    g.drawRect(0, 0, 100, 40);\n    g.endFill();\n\n    this.Note = app.renderer.generateTexture(g);\n\n    g.clear();\n    g.beginFill(0x00e699);\n    g.drawRect(0, 0, 100, 40);\n    g.endFill();\n    this.LongNoteHead = app.renderer.generateTexture(g);\n\n    g.clear();\n    g.beginFill(0x00b87a);\n    g.drawRect(0, 0, 100, 40);\n    g.endFill();\n    this.LongNoteTail = app.renderer.generateTexture(g);\n\n    g.clear();\n    g.beginFill(0x00b87a);\n    g.drawRect(15, 0, 70, 1);\n    g.endFill();\n    this.LongNoteBody = app.renderer.generateTexture(g);\n  }\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SpriteRenderer);\n\n\n//# sourceURL=webpack://sv-editor2/./modules/PIXIRenderedSprites.mjs?");

/***/ }),

/***/ "./modules/PIXIRendering.mjs":
/*!***********************************!*\
  !*** ./modules/PIXIRendering.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Line\": () => (/* binding */ RenderedLine),\n/* harmony export */   \"LongNote\": () => (/* binding */ RenderedLongNote),\n/* harmony export */   \"Note\": () => (/* binding */ RenderedNote),\n/* harmony export */   \"RenderedObject\": () => (/* binding */ RenderedObject),\n/* harmony export */   \"SvBlock\": () => (/* binding */ RenderedSvBlock),\n/* harmony export */   \"from\": () => (/* binding */ from)\n/* harmony export */ });\n/* harmony import */ var _Notes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Notes.mjs */ \"./modules/Notes.mjs\");\n/* harmony import */ var _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SvBlock.mjs */ \"./modules/SvBlock.mjs\");\n/* harmony import */ var _OutlineFilter_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OutlineFilter.mjs */ \"./modules/OutlineFilter.mjs\");\n\n\n\n\n\n\nclass RenderedObject {\n  constructor(linked={}){\n    this.linked = linked; // TODO: disconnect RenderedObject from Object? (other way might make more sense)\n    const {t} = linked;\n    Object.assign(this, {t});\n\n    this.selected = false;\n    this.graphics = null;\n    // this.z = 1;\n  }\n  setTimeScale(timeScale){\n    // this.z = timeScale;\n    return this.graphics.position.y = ~~(-this.t * timeScale);\n  }\n  select(){\n    this.selected = true;\n    if(this.graphics){\n      this.graphics.tint = 0xAADDDD;\n      this.graphics.filters = [new _OutlineFilter_mjs__WEBPACK_IMPORTED_MODULE_2__.OutlineFilter(1, 0xd69600)];\n    }\n    return this;\n  }\n  deselect(){\n    this.selected = false;\n    if(this.graphics){\n      this.graphics.tint = 0xFFFFFF;\n      this.graphics.filters = [];\n    }\n    return this;\n  }\n}\n\nconst measurelines = [null, [1]]\nfunction measureline(x){\n  if(x in measurelines) return measurelines[x];\n  for(let d = 2; d <= x; d ++){\n    if(x/d%1 === 0){\n      let z = measureline(x/d).slice(0);\n      if(!(x in measurelines)) measurelines[x] = z;\n      for(let i = z.length; i > 0; i --) z.splice(i, 0, ...[...new Array(d-1)].map(() => x));\n      return z;\n    }\n  }\n} // scuffed procedural way to generate them\nfor(let i = 1; i < 100; i++) measureline(i);\n// console.log(measurelines);\n\nclass RenderedLine extends RenderedObject {\n  static colorSchemes = measurelines;\n  static colors = [null, 0x000000, 0xf26250, 0xb74fa9, 0x37aedc, 0x686868, 0xf8d44f, 0xf8d44f, 0xf8d44f];\n  constructor(){\n    super();\n    this.linked = this;\n    this.type = 1;\n    const g = this.graphics = new PIXI.Graphics();\n    g.beginFill(0x000000);\n    g.drawRect(0, 0, 400, 1);\n    g.endFill();\n  }\n  setType(i){\n    if(this.type === i) return;\n    this.type = i;\n    const g = this.graphics;\n    g.clear();\n    g.beginFill(RenderedLine.colors[i]);\n    g.drawRect(0, 0, 400, 1);\n    g.endFill();\n  }\n  setPosition(t, z){\n    this.t = ~~t;\n    return this.setTimeScale(z);\n  }\n  static calculatePosition(t, z){\n    return (~~t)*z;\n  }\n}\n\nclass RenderedNote extends RenderedObject {\n  constructor(linked, editor){\n    super(linked);\n    let {x, y, t} = linked;\n    Object.assign(this, {x, y, t})\n    let g;\n    if(editor){\n      g = this.graphics = new PIXI.Sprite(editor.sprites.Note);\n    }else{\n      g = this.graphics = new PIXI.Graphics();\n      g.beginFill(0x0077e6);\n      g.drawRect(0, 0, 100, 40);\n    }\n    g.pivot.set(0, g.height); // nudge up\n    g.position.set(this.x*100, -this.t);\n  }\n  setTime(t){ // method for live replay\n    this.graphics.position.y = -(this.t = t);\n  }\n}\n\nclass RenderedLongNote extends RenderedObject {\n  constructor(linked, editor){\n    super(linked);\n    let {x, y, t, t$} = linked;\n    Object.assign(this, {x, y, t, t$})\n    const g = this.graphics = new PIXI.Container();\n    let head, tail, body;\n    if(editor){\n      head = new PIXI.Sprite(editor.sprites.LongNoteHead);\n      tail = new PIXI.Sprite(editor.sprites.LongNoteTail);\n      body = new PIXI.Sprite(editor.sprites.LongNoteBody);\n    }else{\n      head = new PIXI.Graphics();\n      head.beginFill(0x00e699);\n      head.drawRect(0, 0, 100, 40);\n      tail = this.graphicsTail = new PIXI.Graphics();\n      tail.beginFill(0x00b87a);\n      tail.drawRect(0, 0, 100, 40);\n      body = this.graphicsBody = new PIXI.Graphics();\n      body.beginFill(0x00b87a);\n      body.drawRect(15, 0, 70, 1);\n    }\n\n    tail.position.y = -(this.t$ - this.t);\n    body.scale.y = tail.position.y - head.height - tail.height;\n\n    g.addChild(body, head, tail);\n    g.pivot.set(0, head.height); // nudge up so (0,0) is the visually the very bottom\n    g.position.set(this.x*100, -this.t);\n  }\n  setTime(start, end){\n    this.t = start;\n    this.t$ = end;\n  }\n  setTimeScale(timeScale){\n    // this.z = timeScale;\n    this.graphics.position.y = ~~(-this.t * timeScale);\n    this.graphicsTail.position.y = ~~(-(this.t$ - this.t) * timeScale);\n    this.graphicsBody.scale.y = ~~(-(Math.abs(this.graphicsTail.position.y) - this.graphicsTail.height));\n  }\n}\n\nclass RenderedSvBlock extends RenderedObject {\n  constructor(linked, baseEditor){\n    super(linked);\n    const g = this.graphics = new PIXI.Container();\n    // g.filters = [new OutlineFilter(1, 0xd69600)]; // TODO: don't use a filter and just redraw the rect\n    const body = this.graphicsBody = new PIXI.Graphics();\n    body.beginFill(0xffba1a); // hsl(42, 100%, 55%)\n    // body.lineStyle(1, 0xd69600); // hsl(42, 100%, 42%)\n    body.drawRect(0, 0, 25, 1);\n    body.beginFill(0xefaa0a);\n    body.drawRect(25, 0, 25, 1);\n    body.alpha = 0.5; // to check for overlap\n    /*this.graphicsDebugDisplay = new PIXI.Text(\"\", {\n      fontName: \"Arial\",\n      fontSize: 12,\n      align: \"center\"\n    });*/\n    const tx = this.graphicsLabel = new PIXI.Text(linked.getLabel(), { // TODO: maybe use bitmaptext later\n      fontName: \"Arial\",\n      fontSize: 12,\n      align: \"left\"\n    }); // TODO: render other types of sv block\n    tx.position.y = -tx.height;\n    const line = this.graphicsLine = new PIXI.Graphics();\n    this.render();\n    body.addChild(line);\n    g.addChild(body, tx); //, this.graphicsDebugDisplay\n    g.interactive = true;\n    g.on('pointerover', () => body.alpha = 1);\n    g.on('pointerout', () => body.alpha = 0.5);\n    g.on('pointerdown', e => {\n      if(!this.linked.func.editor){\n        this.linked.func.openEditor(this, baseEditor);\n        this.linked.func.editor.setPosition(e.data.global.x, e.data.global.y);\n      }else{\n        this.linked.func.closeEditor();\n      }\n    });\n  }\n  render(){ // the thing shown on the rectangle for the svBlock\n    this.graphicsLabel.text = this.linked.getLabel();\n    return; // TODO: implement render\n    const l = this.graphicsLine;\n    l.clear();\n    let x;\n    let y; // should be (t=0)\n    l.lineStyle(1, 0x000000);\n    l.moveTo(x=RenderedSvBlock.mapXToHorizontalPosition(this.linked.func.nodes[0].x), y=0);\n    for(let node of this.linked.func.nodes){\n      // if(-y > 1000) l.lineStyle(1, 0x000000);\n      l.lineTo(x, y=RenderedSvBlock.mapTToVerticalPosition(node.t));\n      l.lineTo(x=RenderedSvBlock.mapXToHorizontalPosition(node.x), y);\n      // console.log(x, y);\n    }\n    l.lineTo(x, y=RenderedSvBlock.mapTToVerticalPosition(this.linked.duration));\n    // console.log(x, y);\n    this.graphicsLine.scale.y = 1/y;\n  }\n  static mapXToHorizontalPosition(x){\n    return ~~(Math.min(Math.max(x*20, 0), 40)+5);\n  }\n  static mapTToVerticalPosition(t){\n    return ~~(-t/4);\n  }\n  setTimeScale(timeScale){\n    this.graphics.position.y = -this.linked.t * timeScale;\n    this.graphicsBody.scale.y = -this.linked.duration * timeScale;\n  }\n}\n\n/* class RenderedSvColumn extends RenderedObject { // more like a container\n  constructor(linked){\n    super(linked);\n    const g = this.graphics = new PIXI.Container();\n    this.blocks = [];\n    linked.blocks.forEach(block => {\n      const b = new RenderedSvBlock(block);\n      this.blocks.push(b);\n      g.addChild(b.graphics);\n    })\n  }\n  addBlock(svBlock){\n    const b = new RenderedSvBlock(svBlock);\n    this.blocks.push(b);\n    g.addChild(b.graphics);\n  }\n  setTimeScale(timeScale){\n    this.blocks.forEach(block => block.setTimeScale(timeScale));\n  }\n} */\n\nfunction from(obj, baseEditor){\n  if(obj instanceof _Notes_mjs__WEBPACK_IMPORTED_MODULE_0__.LongNote) return new RenderedLongNote(obj, baseEditor);\n  else if(obj instanceof _Notes_mjs__WEBPACK_IMPORTED_MODULE_0__.Note) return new RenderedNote(obj, baseEditor);\n  else if(obj instanceof _Notes_mjs__WEBPACK_IMPORTED_MODULE_0__.SvBlock) return new RenderedSvBlock(obj, baseEditor);\n  else return null;\n}\n\n\n\n\n//# sourceURL=webpack://sv-editor2/./modules/PIXIRendering.mjs?");

/***/ }),

/***/ "./modules/Project.mjs":
/*!*****************************!*\
  !*** ./modules/Project.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Project\": () => (/* binding */ Project),\n/* harmony export */   \"ProjectEditor\": () => (/* binding */ ProjectEditor),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"sortByTime\": () => (/* binding */ sortByTime)\n/* harmony export */ });\n/* harmony import */ var _Notes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Notes.mjs */ \"./modules/Notes.mjs\");\n/* harmony import */ var _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PIXIRendering.mjs */ \"./modules/PIXIRendering.mjs\");\n/* harmony import */ var _PIXIRenderedSprites_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PIXIRenderedSprites.mjs */ \"./modules/PIXIRenderedSprites.mjs\");\n/* harmony import */ var _pixi_essentials_cull__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pixi-essentials/cull */ \"./node_modules/@pixi-essentials/cull/lib/cull.es.js\");\n\n\n\n\n\n\n// console.log(Rendered);\n\nclass ProjectEditor {\n  constructor(linked){\n    this.bounds = {\n      noteLeft: 0,\n      noteRight: 400,\n      blockLeft: 400,\n      blockRight: 650,\n      resultLeft: 650,\n      resultRight: 750,\n      liveLeft: 750,\n      liveRight: 1150\n    };\n\n    this.linked = linked;\n    this.htmlElement = document.createElement(\"div\");\n    this.htmlElement.style = `position: absolute;\noverflow:hidden;\nwidth:100vw;\nheight:100vh;`;\n    const app = this.app = new PIXI.Application({\n        resizeTo: window,\n        antialias: true,\n        transparent: true,\n        resolution: 1\n      }\n    );\n    // const cull = new Cull({ recursive: true, toggle: 'renderable' });\n    // cull.add(app.stage);\n    // app.renderer.on('prerender', () => cull.cull(app.renderer.screen));\n\n    this.sprites = new _PIXIRenderedSprites_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"](app);\n    const dynamic = this.dynamicStage = new PIXI.Container(); // editor side\n    const projected = this.projectedStage = new PIXI.Container(); // result side\n    this.t = 0;\n    this.prevSnap = 0; // if we're gonna be rendering measurelines might as well use them :D\n    this.nextSnap = 0;\n    this.prevMeasure = 0;\n    this.nextMeasure = 0;\n    this.z = 0.01;\n    this.subdivisions = 4;\n    /*app.view.addEventListener('mousemove', e => {\n      if(this.mouseOver) this.mouseOver.graphics.tint = 0xFFFFFF;\n      const dy = e.offsetY - (project.editor.app.view.height-100);\n      const t = this.mouseT = this.t - dy/this.z;\n      if(e.offsetX < 400){\n        let mouseCol = Math.floor(e.offsetX/400*this.linked.metadata.Difficulty.CircleSize);\n        console.log(mouseCol, t);\n        for(let note of this.notes){\n          let bottomT = note.linked.t;\n          let topT = note.linked.getEnd() + 40/this.z;\n          if(mouseCol === note.linked.x && t > bottomT && t < topT){\n            this.mouseOver = note;\n            break;\n          }\n        }\n      }else{\n\n      }\n      if(this.mouseOver) this.mouseOver.graphics.tint = 0x555555;\n    });\n    app.view.addEventListener('click', e => {\n      console.log(e.offsetX, e.offsetY);\n      if(e.offsetX < 400){ // notes\n\n      }else if(e.offsetX < 400+50*5){ // sv columns\n\n      }\n    });*/\n    app.view.addEventListener('wheel', e => {\n      if(e.deltaY === 0) return; // displacement\n      let up = e.deltaY < 0;\n      if(e.ctrlKey){\n        this.setTimeScale(this.z = up ? (this.z*2) : (this.z/2));\n      }else{\n        // if lines arent rendered completely cuz its zoomed out too much just use 1 second default (no ternary cuz thats unreadable)\n        if(this.lines[this.lines.length-1].t < this.t){\n          this.setTime(Math.max(0, this.t + (up ? -1 : 1)*1000*(e.shiftKey ? 10 : 1)));\n        }else{\n          if(e.altKey){\n            this.setTime(this.t + (up ? -1 : 1));\n          } else this.setTime(Math.max(0, this[(!up?\"next\":\"prev\")+(!e.shiftKey?\"Snap\":\"Measure\")]));\n        }\n      }\n      e.preventDefault();\n    });\n\n    // app.view.addEventListener('keydown', e => { // keydown only fires on contenteditable stuff\n    document.body.addEventListener('keydown', e => {\n      if(e.keyCode>=32) console.log(e.keyCode);\n      this.songAudio = this.linked.songAudio;\n      switch(e.keyCode){\n        case 32: // space\n          if(this.songAudio.playing()){\n            this.songAudio.pause();\n            app.ticker.remove(this.syncTimeToAudio, this);\n          }else{\n            this.songAudio.seek(this.t/1000);\n            this.songAudio.play();\n            app.ticker.add(this.syncTimeToAudio, this);\n          }\n          break;\n      }\n    });\n\n    this.lines = [...new Array(50)].map(x => {\n      const line = new _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__.Line();\n      dynamic.addChild(line.graphics);\n      return line;\n    });\n\n    this.notes = linked.notes.map(note => {\n      const n = _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__.from(note);\n      dynamic.addChild(n.graphics);\n      const n2 = _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__.from(note);\n      note.projected = n2;\n      n2.setTimeScale(1); // TODO: uhh i'll sync this later\n      projected.addChild(n2.graphics);\n      return n;\n    }); // TODO: implement and use this.addNote instead\n\n    this.blocks = [];\n    linked.blocks.forEach(this.addBlock.bind(this));\n\n    let line = new _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__.Line().graphics;\n    line.position.y = 1;\n    line.scale.x = (this.bounds.resultRight - this.bounds.noteLeft) / line.width;\n    line.scale.y = 3;\n    line.alpha = 0.8;\n    let line2 = new _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__.Line().graphics;\n    line.position.set(this.bounds.liveLeft, 0);\n    line.scale.x = (this.bounds.liveRight - this.bounds.liveLeft) / line.width;\n    line.scale.y = 2;\n    line.alpha = 0.8;\n\n    projected.position.x = this.bounds.resultRight;\n    projected.scale.x = 0.5;\n\n    this.refreshOutput();\n\n    this.setTime();\n    app.stage.addChild(dynamic, projected, line, line2);\n    this.htmlElement.append(app.view);\n    document.body.append(this.htmlElement);\n\n    this.setTimeScale(0.32); // syncs everything\n  }\n  setTime(time){\n    if(time !== undefined) this.t = time;\n    this.app.stage.pivot.y = -(this.app.view.height-100);\n    // this.dynamicStage.pivot.y = 40; // nudge up everything\n    this.dynamicStage.position.y = this.t*this.z;\n    this.projectedStage.position.y = this.displacement[~~this.t];\n\n    let i = 0;\n    let currentTimingPoint = this.linked.timingPoints[0]; // TODO: use something O(1) instead of O(n)\n    while(i < this.linked.timingPoints.length){\n      const timingPoint = this.linked.timingPoints[i];\n      if(timingPoint.t > this.t) break;\n      currentTimingPoint = timingPoint;\n      i ++;\n    }\n    let t = this.t - 100/this.z;  // should be very bottom, y=zt; t=y/z\n    // let prevTime = 0; // TODO: avoid rendering if they're too close\n    // let prevY = 0;\n    let mspb = 60000 / currentTimingPoint.bpm;\n    t = Math.floor(t / mspb -1) * mspb + (currentTimingPoint.t)%mspb;\n    let k = 0;\n    let jStart = 0;\n    this.nextSnap = this.nextMeasure = 0;\n    this.lines.forEach((line, j) => { // TODO : lines are kinda buggy on variable bpm stuff\n      let J = j - jStart;\n      let time = t + 60000 / currentTimingPoint.bpm / this.subdivisions * J;\n      let truncatedTime = ~~time;\n      while(time > this.linked.timingPoints[i+1]?.t){\n        i ++;\n        currentTimingPoint = this.linked.timingPoints[i];\n        time = t = currentTimingPoint.t;\n        truncatedTime = ~~time;\n        jStart = j;\n        J = 0;\n      }\n      line.setType(_PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__.Line.colorSchemes[this.subdivisions][J % this.subdivisions]);\n      line.setPosition(time, this.z);\n      if(time < this.t-1.5) this.prevSnap = truncatedTime;\n      if(time > this.t+1.5 && !this.nextSnap) this.nextSnap = truncatedTime;\n      if(J % this.subdivisions === 0){\n        if(time < this.t-1.5) this.prevMeasure = truncatedTime;\n        if(time > this.t+1.5 && !this.nextMeasure) this.nextMeasure = truncatedTime;\n      } // to get all measure snaps: this.lines.map(l => l.t)\n    });\n\n    // this.blocks.forEach(b => {\n    //   const block = b.linked;\n    //   const svBlockEditor = block.func.editor;\n    //   if(svBlockEditor && this.t >= block.t && this.t <= block.t+block.duration){ // filter condition\n    //     svBlockEditor.setTimeScale(this.z);\n    //     svBlockEditor.setTime(this.t-block.t);\n    //   }\n    //   /* b.graphicsDebugDisplay.text = block.func.evaluate(this.t - block.t).toFixed(3) + 'x';\n    //   b.graphicsDebugDisplay.position.y = -this.dynamicStage.position.y - b.graphics.position.y;\n    //   b.graphicsDebugDisplay.anchor.set(0, 0); */\n    // });\n\n    // some tree structure seems appropriate for culling (esp since they dont move around much)\n    if(this.renderedMinT === void 0 || (this.t < this.renderedMinT || this.t > this.renderedMaxT)) this.refreshCulling();\n  }\n  refreshCulling(){ // return;\n    const viewport = this.app.screen;\n    const minY = viewport.y - 1000;\n    const maxY = viewport.height + 500;\n    this.renderedMinT = this.t - (maxY - (this.app.view.height-100))/this.z;\n    this.renderedMaxT = this.t - (minY + (this.app.view.height-100))/this.z;\n    this.notes.forEach(n => {\n      const bounds = n.graphics.getBounds();\n      n.graphics.renderable = n.linked.projected.graphics.renderable = bounds.y+bounds.height>=minY && bounds.y-bounds.height <= maxY;\n    })\n    this.blocks.forEach(n => {\n      const bounds = n.graphics.getBounds();\n      n.graphics.renderable = bounds.y+bounds.height>=minY && bounds.y-bounds.height <= maxY;\n    })\n  }\n  setTimeScale(z){\n    // y = zt\n    /*this.t += this.t * (z-this.z) / z;\n    this.app.stage.position.y = this.t*z;*/\n    this.setTime(this.t + this.t * (z-this.z) / z);\n    this.z = z;\n    this.notes.forEach(n => n.setTimeScale(z));\n    this.blocks.forEach(block => block.setTimeScale(z));\n    this.refreshCulling();\n  }\n  syncTimeToAudio(){\n    if(!this.songAudio) throw \"audio file not found\";\n    this.setTime(this.songAudio.seek()*1000);\n  }\n  getNearestLine(t){ // TODO : binary search\n    let newT = t;\n    let diff = Infinity;\n    for(let i = 0; i < this.lines.length; i ++){\n      var newDiff = Math.abs(this.lines[i].t - t);\n      if(newDiff <= diff){\n        diff = newDiff;\n        newT = this.lines[i].t;\n      } else return newT;\n    }\n    return newT;\n  }\n  addNote(note){\n\n  }\n  addBlock(block){\n    const b = _PIXIRendering_mjs__WEBPACK_IMPORTED_MODULE_1__.from(block, this);\n    b.graphics.position.x = this.bounds.blockLeft + 50*block.x;\n    this.dynamicStage.addChild(b.graphics);\n    this.blocks.push(b);\n    return b;\n  }\n  refreshOutput(){\n    this.linked.calculateSpeedOutput(); // TODO: only update portions instead of refreshing the entire thing\n    this.displacement = [...new Array(this.linked.speed.length)];\n    for(let i in this.displacement){\n      this.displacement[i] = (this.displacement[i-1]||0) + Math.min(1e3, this.linked.speed[i]);\n    }\n    this.linked.notes.forEach(n => {\n      n.projected.setTime(this.displacement[n.t], n.t$&&this.displacement[n.t$]);\n      n.projected.setTimeScale(1);\n    });\n  }\n}\n\nclass Project {\n  constructor(){\n    this.metadata = {};\n    this.notes = [];\n    this.timingPoints = [];\n    this.blocks = [];\n    this.editor = null;\n    this.songAudio = null;\n  }\n  openEditor(){\n    if(this.editor) throw 'project editor already opened';\n    this.editor = new ProjectEditor(this);\n  }\n  closeEditor(){\n    this.editor?.destroy();\n    this.editor = null;\n  }\n  loadResources(files){\n    const audioFile = files.filter(x => x.name === this.metadata.General.AudioFilename)[0];\n    if(!audioFile) throw \"audio file not found!\";\n    const reader = new FileReader();\n    reader.addEventListener('load', () => {\n      this.songAudio = new Howl({\n        src: reader.result,\n        format: audioFile.name.split('.').pop().toLowerCase() // always give file extension: this is optional but helps\n      });\n      this.songAudio.once('load', () => console.log(\"Audio is loaded\"));\n    });\n    reader.readAsDataURL(audioFile);\n  }\n  // loads resources from jsZip object instead of filenames\n  async loadResourcesZip(jsZip) {\n    const audioFile = jsZip.files[this.metadata.General.AudioFilename];\n\n    if (!audioFile) throw \"audio file not found!\";\n    // blob, we need to convert to base64url\n    const audioData = await audioFile.async(\"blob\");\n\n    const reader = new FileReader();\n\n    reader.addEventListener(\"load\", () => {\n      this.songAudio = new Howl({\n        src: reader.result,\n        format: audioFile.name.split(\".\").pop().toLowerCase(), // always give file extension: this is optional but helps\n      });\n      this.songAudio.once(\"load\", () => console.log(\"Audio is loaded\"));\n    });\n\n    reader.readAsDataURL(audioData);\n  }\n  addBlock(){\n    for(const block of arguments){\n      this.blocks.push(block);\n      this.editor?.addBlock(block);\n    }\n    // TODO: X shifting if collisions\n  }\n  calculateSpeedOutput(){\n    this.editor?.app.stop();\n    let _start = performance.now();\n    this.blocks.sort((a,b) => a.x-b.x || a.t-b.t); // TODO : check for collisions ?? (currently assumes no collision)\n    this.speed = [...new Array(this.notes[this.notes.length-1].getEnd())].map(() => 1);\n    for(const block of this.blocks) block.applyOnto(this.speed);\n    this.editor?.app.start();\n    console.log(\"== total calculation time\", 0|(performance.now()-_start), \"ms\")\n  }\n}\n\nconst sortByTime = arr => arr.sort((a,b) => a.t-b.t);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Project);\n\n\n\n//# sourceURL=webpack://sv-editor2/./modules/Project.mjs?");

/***/ }),

/***/ "./modules/SvBlock.mjs":
/*!*****************************!*\
  !*** ./modules/SvBlock.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SvBlock\": () => (/* binding */ SvBlock),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _PFunc_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PFunc.mjs */ \"./modules/PFunc.mjs\");\n\n\nconst OperationEnum = {};\nconst OperationNames = {};\nconst Operations = {\n  /*\n  Operation: fn(x, y)\n    x[] : current sv\n    y[] : sv of block being applied\n  */\n  set: (x, y) => y,\n  add: (x, y) => x+y,\n  subtract: (x, y) => x-y,\n  multiply: (x, y) => x*y,\n  divide: (x, y) => x/y,\n  intensify: (x) => x, // TODO\n  normalize: (x) => x, // TODO\n};\nObject.keys(Operations).forEach(operation => {\n  const symbol = Symbol('sv:'+operation.toLowerCase());\n  OperationEnum[operation.toUpperCase()] = symbol;\n  OperationNames[symbol] = operation;\n  Operations[symbol] = Operations[operation];\n  // i feel like this aint very good but uhh well its readable at least???\n});\n\nclass SvBlock {\n  static Operation = OperationEnum;\n  constructor(operation=SvBlock.Operation.SET, col=0, t=0, duration=0){\n    // if(t !== Math.round(t)) throw `expected integer t, observed t=${t}`;\n    this.x = col;\n    this.operation = operation;\n    this.func = new _PFunc_mjs__WEBPACK_IMPORTED_MODULE_0__.PFunc(this);\n    this.t = t;\n    this.duration = duration;\n  }\n  getLabel(){\n    return OperationNames[this.operation] + \"\\n\" + this.func.getLabel();\n  }\n  integrate(a, b){ return this.func.integrate(a-this.t, b-this.t); }\n  evaluate(t){ return this.func.evaluate((t-this.t) / this.duration); }\n  setPoint(t, x){\n    this.func.setPoint(t, x);\n  }\n  offsetX(k){\n    this.func.nodes.forEach(node => node.x += k);\n  }\n  offsetT(k){ this.func.nodes.forEach(node => node.t += k); }\n  scaleX(k, a, b){\n    if(a !== void 0 && b !== void 0){\n      b -= 1;\n      this.func.setPoint(a, this.func.evaluate(a)*k);\n      this.func.setPoint(b, this.func.evaluate(b));\n      for(const node of this.func.nodes)\n        if(node.x > a || node.y < b)\n          node.x *= k;\n    }else this.func.nodes.forEach(node => node.x *= k);\n  }\n  scaleT(k){ this.func.nodes.forEach(node => node.t *= k); }\n  splice(t){ // cuts off second half from instance and returns it\n    if(t < 0 || t > this.duration) throw 'invalid splice range';\n    const remainder = new SvBlock(this.operation);\n    remainder.duration = this.duration - t;\n    remainder.t = this.t + t;\n    remainder.func = this.func.splice(t);\n    remainder.func.linked = remainder;\n    this.duration = t;\n    return remainder;\n  }\n  applyOnto(velocityArray/*, resolution*/){ // TODO : resolution for fast rendering??\n    // consider binary index tree?\n    let start = this.t, end = start + this.duration;\n    if(start !== Math.round(start) || end !== Math.round(end)) throw [\"expected integer times\", this];\n\n    let y = null, func;\n    switch(this.operation){\n      case SvBlock.Operation.SET:\n      case SvBlock.Operation.ADD:\n      case SvBlock.Operation.SUBTRACT:\n      case SvBlock.Operation.MULTIPLY:\n      case SvBlock.Operation.DIVIDE:\n      case SvBlock.Operation.INTENSIFY:\n        func = Operations[this.operation];\n        if(this.func.isConstant()) y = this.evaluate(start);\n        break;\n      case SvBlock.Operation.NORMALIZE:\n        func = Operations.multiply;\n        let displacement = 0;\n        for(let x = Math.round(start); x < end; x ++) displacement += velocityArray[x];\n        y = this.evaluate(start) * (end - start) / displacement;\n        break;\n    }\n    for(let t = start; t < end; t ++){\n      velocityArray[t] = func(velocityArray[t], y !== null ? y : this.evaluate(t));\n    }\n    return velocityArray;\n  }\n  snapToMs(opts){\n    /*\n      bool: useSelfForUnknown: when snapping but theres undefined parts\n    */\n    this.func.snapToMs(this.t, opts);\n  }\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SvBlock);\n\n\n//# sourceURL=webpack://sv-editor2/./modules/SvBlock.mjs?");

/***/ }),

/***/ "./modules/SvBuilder.mjs":
/*!*******************************!*\
  !*** ./modules/SvBuilder.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SvBuilder\": () => (/* binding */ SvBuilder),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Project_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Project.mjs */ \"./modules/Project.mjs\");\n/* harmony import */ var _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SvBlock.mjs */ \"./modules/SvBlock.mjs\");\n\n\n\nclass Point {\n  constructor(t, x){\n    this.x = x;\n    this.t = t;\n  }\n}\n\nclass SvBuilder {\n  constructor(){\n    this.sorted = true;\n    this.aligned = true;\n    this.points = [];\n  }\n  addPoint(t, x){\n    this.sorted = false;\n    if(t !== Math.round(t)) this.aligned = false;\n    this.points.push(new Point(t, x));\n  }\n  sort(){\n    (0,_Project_mjs__WEBPACK_IMPORTED_MODULE_0__.sortByTime)(this.points);\n    this.sorted = true;\n  }\n  cull(){\n    if(!this.sorted) this.sort();\n    for(let i = this.points.length-1; i > 0; i --){\n      if(this.points[i].x == this.points[i-1].x) this.points.splice(i, 1);\n    }\n  }\n  scaleX(k){\n    for(const point of this.points) point.x *= k;\n  }\n  integrate(a, b){\n    if(!this.sorted) this.sort();\n\n    let l = 0, r = this.points.length-1, m, lm;\n    while(l <= r){\n      m = ~~((l+r)/2); // t----  A t1---  B\n      // console.log(l, r, m);\n      if(this.points[m+1]?.t > a) r = (lm = m)-1;\n      else if(this.points[m+1]?.t < a) l = (lm = m)+1;\n      else if(this.points[m+1]?.t == a) {\n        lm = m+1;\n        break;\n      } else break;\n    }\n    // console.log(a, this.points.slice(lm-2,lm+4), this.points[lm]);\n    let sum = 0;\n    let t = a, nt; // b -= 1;\n    for(let i = lm; t < b; i ++){\n      nt = Math.max(t, Math.min(b, i+1 < this.points.length ? this.points[i+1].t : b));\n      // if(help)console.log(t, nt, '->', Math.max(0, nt-t), \"@\", this.points[i].x);\n      sum += (nt-t) * this.points[i].x;\n      t = nt;\n    }\n    return sum;\n  }\n  align(){\n    let temp = [];\n    let t = Math.floor(this.points[0].t);\n    let carry = (this.points[0].t - t) * this.points[0].x;\n    // ... 1----2----3----4----5---- ...\n    //       aaabbbbbbbbbbcc\n    //       aaacc\n    //       dd\n    for(let i = 0; i < this.points.length-1; i ++){\n      let velocity = this.points[i].x;\n      let curr = this.points[i].t;\n      let next = this.points[i+1].t;\n      if(Math.floor(curr) === Math.floor(next)){\n        // section d\n        carry += velocity * (next - t);\n        t = next;\n      }else{\n        // section a\n        if(curr !== Math.round(curr)){\n          carry += velocity * (Math.ceil(curr) - t);\n          t = Math.ceil(curr);\n        }\n\n        if(carry){\n          temp.push(new Point(t-1, carry));\n          carry = 0;\n        }\n        // section b\n        if(Math.floor(next) > t){\n          temp.push(new Point(t, velocity));\n          t = Math.floor(next);\n        }\n\n        // section c\n        if(next !== Math.round(next)){\n          carry += velocity * (next - t);\n        }\n      }\n    }\n    this.points.splice(0);\n    this.points = temp;\n    // if(carry) console.warn(\"residual at end\", {carry, t});\n    this.aligned = true;\n  }\n  *exportAsBlocks(operation, col, endTime){\n    if(!this.sorted) this.sort();\n    if(!this.aligned) this.align();\n    if(endTime === undefined) endTime = this.points[this.points.length-1].t + 10000;\n    // SvBlock constructor(operation=SvBlock.Operation.SET, col=0, t=0, duration=0){\n    for(let i = 0; i < this.points.length; i ++){\n      const svBlock = new _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_1__.SvBlock(operation, col, this.points[i].t, (i+1 < this.points.length ? this.points[i+1]?.t : endTime) - this.points[i].t);\n      svBlock.func.set([0, this.points[i].x]); // [t0, x0]\n      if(svBlock.duration > 0) yield svBlock; // NOTE: duplicate will be generated\n      else console.warn(\"suppressing svBlocks at same time\", svBlock);\n    }\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SvBuilder);\n\n\n\n//# sourceURL=webpack://sv-editor2/./modules/SvBuilder.mjs?");

/***/ }),

/***/ "./modules/TimingPoint.mjs":
/*!*********************************!*\
  !*** ./modules/TimingPoint.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TimingPoint\": () => (/* binding */ TimingPoint),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass TimingPoint {\n  constructor(t=0, bpm=120, meter=4){\n    this.t = t;\n    this.bpm = bpm;\n    this.meter = meter;\n  }\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TimingPoint);\n\n\n//# sourceURL=webpack://sv-editor2/./modules/TimingPoint.mjs?");

/***/ }),

/***/ "./modules/codecs/osuCodec.mjs":
/*!*************************************!*\
  !*** ./modules/codecs/osuCodec.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decode\": () => (/* binding */ decode),\n/* harmony export */   \"encode\": () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _Project_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Project.mjs */ \"./modules/Project.mjs\");\n/* harmony import */ var _Notes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Notes.mjs */ \"./modules/Notes.mjs\");\n/* harmony import */ var _TimingPoint_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TimingPoint.mjs */ \"./modules/TimingPoint.mjs\");\n/* harmony import */ var _SvBlock_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../SvBlock.mjs */ \"./modules/SvBlock.mjs\");\n/* harmony import */ var _SvBuilder_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../SvBuilder.mjs */ \"./modules/SvBuilder.mjs\");\n\n\n\n\n\n\nfunction calculateBaseBpm(project){\n  const bpms = {};\n  let baseBpm = 1;\n  let baseBpmDuration = 0;\n  const start = project.notes[0].t;\n  let current = start;\n  const end = project.notes[project.notes.length-1].getEnd();\n  let prevBpm = null;\n  for(const {t, bpm} of project.timingPoints.concat({t:end, bpm:0})){\n    let x = prevBpm || bpm;\n    bpms[x] = (bpms[x]||0) + (t-current);\n    if(bpms[x] > baseBpmDuration){ // TODO: check baseBpm behavior when theres a tie\n      baseBpm = x;\n      baseBpmDuration = bpms[x];\n    }\n    // if(bpms[bpm] === (baseBpmDuration = Math.max(baseBpm, bpms[bpm]))) baseBpm = bpm; // lol\n    current = t;\n    prevBpm = bpm;\n  }\n  // console.log(bpms, baseBpm); // WARNING : might be broken but works good enough for now\n  return {bpms, baseBpm};\n}\n\nfunction decode(text){\n  const project = new _Project_mjs__WEBPACK_IMPORTED_MODULE_0__.Project();\n  text = text.replace(/\\r/g, '');\n  let state = null;\n  let columnCount = 4;\n  let start = Infinity, end = -Infinity;\n  let bpm, sv, velocity = new _SvBuilder_mjs__WEBPACK_IMPORTED_MODULE_4__.SvBuilder, normalization = new _SvBuilder_mjs__WEBPACK_IMPORTED_MODULE_4__.SvBuilder;\n  for(const line of text.split('\\n')){\n    if(!line) continue;\n    // console.log(line);\n    // if(/^\\[[^\\]]+\\]$/.test(line)) state = line.replace(/[\\[\\]]/g, ''); // welp apparently regex is really slow... https://jsbench.me/sel7a2xeh1/1 ; it has the bonus of being easier to write tho haha\n    if(!project.metadata.fileFormat) project.metadata.fileFormat = line;\n    if(line[0] === \"[\" && line[line.length-1] === \"]\"){\n      if(state === \"Difficulty\") columnCount = +project.metadata.Difficulty.CircleSize;\n      state = line.substring(1, line.length-1);\n    } else {\n      let spaceAfterColonInDelimiter = 0;\n      switch(state){\n        case \"General\": // just setting up the metadata stuff\n        case \"Editor\":\n          spaceAfterColonInDelimiter = 1;\n        case \"Metadata\":\n        case \"Difficulty\":\n          const delimiter = spaceAfterColonInDelimiter ? ': ' : ':'; // i cant believe the spacing aint consistent :sob:\n          // console.log(state, `[${delimiter}]`);\n          const data = line.split(delimiter);\n          if(!(state in project.metadata)) project.metadata[state] = {};\n          project.metadata[state][data[0]] = data[1];\n          spaceAfterColonInDelimiter = 0; // if its NOT General or Editor, then it'll stay 0\n          break;\n        case \"Events\": // TODO: take the bg here and just throw the sb stuff into cache for export\n          if(!(state in project.metadata)) project.metadata[state] = \"\";\n          project.metadata[state] += line + \"\\n\";\n          break;\n        case \"TimingPoints\": { // separate BPM & SV here, probably the only codec stuff happens here haha\n          /*\n          time,beatLength,meter,sampleSet,sampleIndex,volume,uninherited,effects\n          0int,1float,    2int, 3int,     4int,       5int,  6bool(0/1), 7int\n          effects: bit0 - kiai, bit3 - ignore first barline\n          */\n          const data = line.split(',').map(x => isNaN(x) ? x : +x);\n          const t = data[0];\n          const uninherited = !!data[6];\n          const mspb = Math.abs(data[1]);\n          // TODO: implement other timingpoint data\n          if(uninherited){ // scale to base bpm after we figure out whatever it is (assume basebpm:=1 initially)\n            sv = bpm = 60000/mspb;\n            if(bpm > 10 && bpm <= 5000) project.timingPoints.push(new _TimingPoint_mjs__WEBPACK_IMPORTED_MODULE_2__.TimingPoint(t, bpm, data[2]));\n          }else{\n            sv = 100/mspb; // what is speed is\n            // TODO : add option for parsing clamping\n            // sv = Math.min(Math.max(100/mspb, 0.01), 10); // osu 0.01-10.00 clamping\n            sv = bpm * sv; // equivalent bpm speed\n          }\n          velocity.addPoint(t, sv); // WARNING: some jank stuff might happen with points at the same time ??\n          break;\n        } // doin the weird brace thingy in switch/case for scoping\n        case \"HitObjects\": { // yeeters into the notes array\n          /*\n          RICE   - x,y,time,type=1  ,hitSound,objectParams,hitSample\n          NOODLE - x,y,time,type=128,hitSound,endTime:hitSample\n\n          hitSample format\n          normalSet:additionSet:index:volume:filename\n          0:0:0:0:   [default]\n          */ // so inconsistent :c ... but at least i'm actually reading the osu! docs more carefully for once, sorta\n          let n;\n          const data = line.split(/[,:]/).map(x => isNaN(x) ? x : +x);\n          const col = Math.min(Math.max(Math.floor(data[0] * columnCount / 512), 0), columnCount - 1);\n          if(data[3] < 100){ // rice\n            n = new _Notes_mjs__WEBPACK_IMPORTED_MODULE_1__.Note(col, data[2]);\n          } else { // noodle\n            n = new _Notes_mjs__WEBPACK_IMPORTED_MODULE_1__.LongNote(col, data[2], data[5]);\n          }\n          start = Math.min(start, n.getStart());\n          end = Math.max(end, n.getEnd());\n          /* n.hitsound = data[3]\n          n.sample = data[6+] */ // TODO: implement hitsounds\n          project.notes.push(n);\n          break;\n        }\n      }\n    }\n  }\n  // post read processing (maybe move tp processing here if things break)\n  (0,_Project_mjs__WEBPACK_IMPORTED_MODULE_0__.sortByTime)(project.notes);\n  (0,_Project_mjs__WEBPACK_IMPORTED_MODULE_0__.sortByTime)(project.timingPoints);\n  velocity.sort();\n\n  // globalSvBlock.snapToMs({useSelfForUnknown: true});\n  // console.log(globalSvBlock);\n\n  // base bpm\n  const baseBpm = calculateBaseBpm(project).baseBpm;\n  let firstTimingPoint = project.timingPoints[0].t;\n  velocity.scaleX(1/baseBpm);\n\n  // normalization\n  // const globalSvBlock = new SvBlock(SvBlock.Operation.SET);\n  // const globalNormalizationBlock = new SvBlock(SvBlock.Operation.NORMALIZE, 4);\n  const notePositions = [...new Set(project.notes.map(x => [x.t, x.t$]).flat().filter(x => x !== void 0))].sort((a,b)=>a-b); // splits\n\n  if(notePositions[0] > firstTimingPoint) notePositions.unshift(firstTimingPoint);\n\n  // console.log(notePositions);\n\n  // const speeds = globalSvBlock.func;\n  for(let i = 0; i < notePositions.length-1; i ++){\n    const normalized = notePositions[i+1] - notePositions[i];\n    const observed = velocity.integrate(notePositions[i], notePositions[i+1]);\n    // console.log(notePositions[i], notePositions[i+1], normalized, observed, observed/normalized);\n    const average = observed/normalized;\n    // // globalSvBlock.scaleX(1/average, notePositions[i]-notePositions[0], notePositions[i+1]-notePositions[0]);\n    // globalNormalizationBlock.setPoint(notePositions[i]-notePositions[0], average);\n    normalization.addPoint(notePositions[i], average);\n  }\n\n  // globalSvBlock.offsetT(-Math.floor(firstTimingPoint)); // NOTE : might be okay to keep original offsets\n  // globalSvBlock.func.nodes[0].t = 0;\n  // globalSvBlock.t = Math.floor(firstTimingPoint);\n  // globalSvBlock.duration = end-firstTimingPoint;\n  // globalNormalizationBlock.t = notePositions[0];\n  // globalNormalizationBlock.duration = notePositions[notePositions.length-1] - notePositions[0];\n\n  /*const blocks = [globalSvBlock];\n  let splits = [...new Set(project.notes.map(x => [x.t, x.t$]).flat().filter(x => x !== void 0 && x > firstTimingPoint ))].sort((a,b)=>a-b);\n  let prev = null;\n  for(let i = 0; i < splits.length; i += 10){\n    blocks.push(blocks[blocks.length-1].splice(splits[i]-splits[prev]||firstTimingPoint));\n    prev = i;\n  }\n  blocks.forEach(block => project.svColumns[0].addBlock(block));*/\n\n  // project.addBlock(globalSvBlock);\n  // project.addBlock(globalNormalizationBlock); // TODO: do that [...arguments] thingy\n  // console.log(velocity, normalization);\n  velocity.cull();\n  // normalization.cull(); // TODO: export using known note positions\n  project.addBlock(...velocity.exportAsBlocks(_SvBlock_mjs__WEBPACK_IMPORTED_MODULE_3__.SvBlock.Operation.SET, 0, end));\n  project.addBlock(...normalization.exportAsBlocks(_SvBlock_mjs__WEBPACK_IMPORTED_MODULE_3__.SvBlock.Operation.NORMALIZE, 4, end));\n  return project;\n}\nfunction encode(project){\n  project.calculateSpeedOutput();\n\n  // TODO: compile to osu :3c\n  const m = project.metadata; // alias cuz dont wanna type all of it out :skull:\n  let raw = `${m.fileFormat}`;\n  [{ section: \"General\", delimiter: ': ' },\n  { section: \"Editor\", delimiter: ': ' },\n  { section: \"Metadata\", delimiter: ':' },\n  { section: \"Difficulty\", delimiter: ':' }].forEach(({section, delimiter}) => {\n    raw += `\\n\\n[${section}]\\n` + Object.entries(m[section]).map(x => x.join(delimiter)).join('\\n');\n  });\n  raw += `\\n\\n[Events]\\n` + m.Events;\n\n  raw += `\\n[TimingPoints]`;\n  let tp = -1, currentTimingPoint;\n  let bpmChanged = false;\n  let prevSpeed = null;\n  const baseBpm = calculateBaseBpm(project).baseBpm;\n\n  raw += `\\n0,${60000/baseBpm},${4},2,0,30,1,0`; // osu dies on green tp without red tp to use\n  for(let t = Math.min(project.notes[0].t, Math.floor(project.timingPoints[0].t+1)); t < project.speed.length; t ++){\n    // if(t > 10000) break;\n\n    let uninherited, inherited;\n    while(tp<0 || project.timingPoints[tp+1]?.t <= t){\n      tp ++;\n      currentTimingPoint = project.timingPoints[tp];\n      // TODO : export other properties of timingpoint\n      uninherited = `\\n${currentTimingPoint.t},${60000/currentTimingPoint.bpm},${currentTimingPoint.meter},2,0,30,1,0`;\n      /*\n      time,beatLength,meter,sampleSet,sampleIndex,volume,uninherited,effects\n      0int,1float,    2int, 3int,     4int,       5int,  6bool(0/1), 7int\n      effects: bit0 - kiai, bit3 - ignore first barline\n      */\n      prevSpeed = null;\n    }\n    // let exportSpeed = project.speed[t] / (currentTimingPoint.bpm / baseBpm);\n    let exportSpeed = project.speed[t] / currentTimingPoint.bpm * baseBpm;\n    if(prevSpeed === exportSpeed){\n      // necessary to reset bpm (if needed)\n      raw += (uninherited||\"\") + (inherited||\"\");\n      continue;\n    } prevSpeed = exportSpeed;\n    if(exportSpeed >= 0.01 && exportSpeed <= 10){ // TODO : accumulator so its not so dumb\n      // within the bounds of the clamp\n      if(bpmChanged){ // only reset bpm if we're all good again to be using current bpm\n        // console.log(t);\n        // TODO : change bpm onto original snap once possible (so the lines arent dumb)\n        uninherited = `\\n${t},${60000/currentTimingPoint.bpm},${currentTimingPoint.meter},2,0,30,1,0`;\n        bpmChanged = false;\n      }\n      inherited = `\\n${t},${-100/exportSpeed},${currentTimingPoint.meter},2,0,30,0,0`;\n    }else{\n      // console.log(exportSpeed, t);\n      // something 0.01x (100) or 10x (0.1) that we can reach\n      const coef = Math.max(0.1, Math.random()*100);\n      const bpm = Math.min(Math.max(project.speed[t], 0.0001), 14000) * baseBpm  * coef; // speed = bpm/baseBpm ;; bpm = speed * base BPM\n      // const sv = project.speed[t] / bpm * baseBpm;\n      // const sv = SP / (SP * baseBpm * coef) * baseBpm = 1/ coef;\n      const sv = 1 / coef;\n      if(sv < 0.01 || sv > 10) console.warn(\"bruh wtf\", bpm, coef, sv, t);\n      uninherited = `\\n${t},${60000/bpm},${currentTimingPoint.meter},2,0,30,1,0`;\n      inherited = `\\n${t},${-100/sv},${currentTimingPoint.meter},2,0,30,0,0`;\n      bpmChanged = true;\n    }\n    // if(uninherited) bpmChanged = true;\n    // if(uninherited) console.log(uninherited, inherited, bpmChanged);\n    raw += (uninherited||\"\") + (inherited||\"\");\n  }\n\n  raw += `\\n\\n\\n[HitObjects]\\n` + project.notes.map(note => {\n    // TODO: export other properties of hitobject\n    let x = 0|((512/m.Difficulty.CircleSize)*(0.5+note.x));\n    let t = 0|note.t;\n    let tail = note instanceof _Notes_mjs__WEBPACK_IMPORTED_MODULE_1__.LongNote ? `128,0,${note.t$}:` : '1,0,';\n    let hitSample = '0:0:0:0:';\n    return `${x},192,${t},${tail}${hitSample}`;\n  }).join('\\n');\n  return raw;\n}\n\n\n\n\n//# sourceURL=webpack://sv-editor2/./modules/codecs/osuCodec.mjs?");

/***/ }),

/***/ "./node_modules/@pixi/math/dist/esm/math.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@pixi/math/dist/esm/math.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle\": () => (/* binding */ Circle),\n/* harmony export */   \"DEG_TO_RAD\": () => (/* binding */ DEG_TO_RAD),\n/* harmony export */   \"Ellipse\": () => (/* binding */ Ellipse),\n/* harmony export */   \"Matrix\": () => (/* binding */ Matrix),\n/* harmony export */   \"ObservablePoint\": () => (/* binding */ ObservablePoint),\n/* harmony export */   \"PI_2\": () => (/* binding */ PI_2),\n/* harmony export */   \"Point\": () => (/* binding */ Point),\n/* harmony export */   \"Polygon\": () => (/* binding */ Polygon),\n/* harmony export */   \"RAD_TO_DEG\": () => (/* binding */ RAD_TO_DEG),\n/* harmony export */   \"Rectangle\": () => (/* binding */ Rectangle),\n/* harmony export */   \"RoundedRectangle\": () => (/* binding */ RoundedRectangle),\n/* harmony export */   \"SHAPES\": () => (/* binding */ SHAPES),\n/* harmony export */   \"Transform\": () => (/* binding */ Transform),\n/* harmony export */   \"groupD8\": () => (/* binding */ groupD8)\n/* harmony export */ });\n/*!\n * @pixi/math - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/math is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n/**\n * Two Pi.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nvar PI_2 = Math.PI * 2;\n/**\n * Conversion factor for converting radians to degrees.\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * Conversion factor for converting degrees to radians.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nvar DEG_TO_RAD = Math.PI / 180;\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nvar SHAPES;\n(function (SHAPES) {\n    SHAPES[SHAPES[\"POLY\"] = 0] = \"POLY\";\n    SHAPES[SHAPES[\"RECT\"] = 1] = \"RECT\";\n    SHAPES[SHAPES[\"CIRC\"] = 2] = \"CIRC\";\n    SHAPES[SHAPES[\"ELIP\"] = 3] = \"ELIP\";\n    SHAPES[SHAPES[\"RREC\"] = 4] = \"RREC\";\n})(SHAPES || (SHAPES = {}));\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n * @class\n * @memberof PIXI\n * @implements {IPoint}\n */\nvar Point = /** @class */ (function () {\n    /**\n     * Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    function Point(x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        /** Position of the point on the x axis */\n        this.x = 0;\n        /** Position of the point on the y axis */\n        this.y = 0;\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Creates a clone of this point\n     * @returns A clone of this point\n     */\n    Point.prototype.clone = function () {\n        return new Point(this.x, this.y);\n    };\n    /**\n     * Copies `x` and `y` from the given point into this point\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    Point.prototype.copyFrom = function (p) {\n        this.set(p.x, p.y);\n        return this;\n    };\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    Point.prototype.copyTo = function (p) {\n        p.set(this.x, this.y);\n        return p;\n    };\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    Point.prototype.equals = function (p) {\n        return (p.x === this.x) && (p.y === this.y);\n    };\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    Point.prototype.set = function (x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = x; }\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    Point.prototype.toString = function () {\n        return \"[@pixi/math:Point x=\" + this.x + \" y=\" + this.y + \"]\";\n    };\n    return Point;\n}());\n\nvar tempPoints = [new Point(), new Point(), new Point(), new Point()];\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nvar Rectangle = /** @class */ (function () {\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    function Rectangle(x, y, width, height) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (width === void 0) { width = 0; }\n        if (height === void 0) { height = 0; }\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n    Object.defineProperty(Rectangle.prototype, \"left\", {\n        /** Returns the left edge of the rectangle. */\n        get: function () {\n            return this.x;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"right\", {\n        /** Returns the right edge of the rectangle. */\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"top\", {\n        /** Returns the top edge of the rectangle. */\n        get: function () {\n            return this.y;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"bottom\", {\n        /** Returns the bottom edge of the rectangle. */\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle, \"EMPTY\", {\n        /** A constant empty rectangle. */\n        get: function () {\n            return new Rectangle(0, 0, 0, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    Rectangle.prototype.clone = function () {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    };\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    Rectangle.prototype.copyFrom = function (rectangle) {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n        return this;\n    };\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    Rectangle.prototype.copyTo = function (rectangle) {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n        return rectangle;\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    Rectangle.prototype.contains = function (x, y) {\n        if (this.width <= 0 || this.height <= 0) {\n            return false;\n        }\n        if (x >= this.x && x < this.x + this.width) {\n            if (y >= this.y && y < this.y + this.height) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    Rectangle.prototype.intersects = function (other, transform) {\n        if (!transform) {\n            var x0_1 = this.x < other.x ? other.x : this.x;\n            var x1_1 = this.right > other.right ? other.right : this.right;\n            if (x1_1 <= x0_1) {\n                return false;\n            }\n            var y0_1 = this.y < other.y ? other.y : this.y;\n            var y1_1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n            return y1_1 > y0_1;\n        }\n        var x0 = this.left;\n        var x1 = this.right;\n        var y0 = this.top;\n        var y1 = this.bottom;\n        if (x1 <= x0 || y1 <= y0) {\n            return false;\n        }\n        var lt = tempPoints[0].set(other.left, other.top);\n        var lb = tempPoints[1].set(other.left, other.bottom);\n        var rt = tempPoints[2].set(other.right, other.top);\n        var rb = tempPoints[3].set(other.right, other.bottom);\n        if (rt.x <= lt.x || lb.y <= lt.y) {\n            return false;\n        }\n        var s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n        if (s === 0) {\n            return false;\n        }\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n            return false;\n        }\n        var nx = s * (lb.y - lt.y);\n        var ny = s * (lt.x - lb.x);\n        var n00 = (nx * x0) + (ny * y0);\n        var n10 = (nx * x1) + (ny * y0);\n        var n01 = (nx * x0) + (ny * y1);\n        var n11 = (nx * x1) + (ny * y1);\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y)) {\n            return false;\n        }\n        var mx = s * (lt.y - rt.y);\n        var my = s * (rt.x - lt.x);\n        var m00 = (mx * x0) + (my * y0);\n        var m10 = (mx * x1) + (my * y0);\n        var m01 = (mx * x0) + (my * y1);\n        var m11 = (mx * x1) + (my * y1);\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    Rectangle.prototype.pad = function (paddingX, paddingY) {\n        if (paddingX === void 0) { paddingX = 0; }\n        if (paddingY === void 0) { paddingY = paddingX; }\n        this.x -= paddingX;\n        this.y -= paddingY;\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n        return this;\n    };\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    Rectangle.prototype.fit = function (rectangle) {\n        var x1 = Math.max(this.x, rectangle.x);\n        var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        var y1 = Math.max(this.y, rectangle.y);\n        var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n        return this;\n    };\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    Rectangle.prototype.ceil = function (resolution, eps) {\n        if (resolution === void 0) { resolution = 1; }\n        if (eps === void 0) { eps = 0.001; }\n        var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n        return this;\n    };\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    Rectangle.prototype.enlarge = function (rectangle) {\n        var x1 = Math.min(this.x, rectangle.x);\n        var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        var y1 = Math.min(this.y, rectangle.y);\n        var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n        return this;\n    };\n    Rectangle.prototype.toString = function () {\n        return \"[@pixi/math:Rectangle x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n    };\n    return Rectangle;\n}());\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nvar Circle = /** @class */ (function () {\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    function Circle(x, y, radius) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (radius === void 0) { radius = 0; }\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.type = SHAPES.CIRC;\n    }\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    Circle.prototype.clone = function () {\n        return new Circle(this.x, this.y, this.radius);\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    Circle.prototype.contains = function (x, y) {\n        if (this.radius <= 0) {\n            return false;\n        }\n        var r2 = this.radius * this.radius;\n        var dx = (this.x - x);\n        var dy = (this.y - y);\n        dx *= dx;\n        dy *= dy;\n        return (dx + dy <= r2);\n    };\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @returns The framing rectangle\n     */\n    Circle.prototype.getBounds = function () {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    };\n    Circle.prototype.toString = function () {\n        return \"[@pixi/math:Circle x=\" + this.x + \" y=\" + this.y + \" radius=\" + this.radius + \"]\";\n    };\n    return Circle;\n}());\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nvar Ellipse = /** @class */ (function () {\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    function Ellipse(x, y, halfWidth, halfHeight) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (halfWidth === void 0) { halfWidth = 0; }\n        if (halfHeight === void 0) { halfHeight = 0; }\n        this.x = x;\n        this.y = y;\n        this.width = halfWidth;\n        this.height = halfHeight;\n        this.type = SHAPES.ELIP;\n    }\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {PIXI.Ellipse} A copy of the ellipse\n     */\n    Ellipse.prototype.clone = function () {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    Ellipse.prototype.contains = function (x, y) {\n        if (this.width <= 0 || this.height <= 0) {\n            return false;\n        }\n        // normalize the coords to an ellipse with center 0,0\n        var normx = ((x - this.x) / this.width);\n        var normy = ((y - this.y) / this.height);\n        normx *= normx;\n        normy *= normy;\n        return (normx + normy <= 1);\n    };\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    Ellipse.prototype.getBounds = function () {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    };\n    Ellipse.prototype.toString = function () {\n        return \"[@pixi/math:Ellipse x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n    };\n    return Ellipse;\n}());\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nvar Polygon = /** @class */ (function () {\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    function Polygon() {\n        var arguments$1 = arguments;\n\n        var points = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            points[_i] = arguments$1[_i];\n        }\n        var flat = Array.isArray(points[0]) ? points[0] : points;\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number') {\n            var p = [];\n            for (var i = 0, il = flat.length; i < il; i++) {\n                p.push(flat[i].x, flat[i].y);\n            }\n            flat = p;\n        }\n        this.points = flat;\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    Polygon.prototype.clone = function () {\n        var points = this.points.slice();\n        var polygon = new Polygon(points);\n        polygon.closeStroke = this.closeStroke;\n        return polygon;\n    };\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    Polygon.prototype.contains = function (x, y) {\n        var inside = false;\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        var length = this.points.length / 2;\n        for (var i = 0, j = length - 1; i < length; j = i++) {\n            var xi = this.points[i * 2];\n            var yi = this.points[(i * 2) + 1];\n            var xj = this.points[j * 2];\n            var yj = this.points[(j * 2) + 1];\n            var intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n    Polygon.prototype.toString = function () {\n        return \"[@pixi/math:Polygon\"\n            + (\"closeStroke=\" + this.closeStroke)\n            + (\"points=\" + this.points.reduce(function (pointsDesc, currentPoint) { return pointsDesc + \", \" + currentPoint; }, '') + \"]\");\n    };\n    return Polygon;\n}());\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n * @memberof PIXI\n */\nvar RoundedRectangle = /** @class */ (function () {\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    function RoundedRectangle(x, y, width, height, radius) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (width === void 0) { width = 0; }\n        if (height === void 0) { height = 0; }\n        if (radius === void 0) { radius = 20; }\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n        this.type = SHAPES.RREC;\n    }\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    RoundedRectangle.prototype.clone = function () {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    RoundedRectangle.prototype.contains = function (x, y) {\n        if (this.width <= 0 || this.height <= 0) {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width) {\n            if (y >= this.y && y <= this.y + this.height) {\n                var radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                    || (x >= this.x + radius && x <= this.x + this.width - radius)) {\n                    return true;\n                }\n                var dx = x - (this.x + radius);\n                var dy = y - (this.y + radius);\n                var radius2 = radius * radius;\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    RoundedRectangle.prototype.toString = function () {\n        return \"[@pixi/math:RoundedRectangle x=\" + this.x + \" y=\" + this.y\n            + (\"width=\" + this.width + \" height=\" + this.height + \" radius=\" + this.radius + \"]\");\n    };\n    return RoundedRectangle;\n}());\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nvar ObservablePoint = /** @class */ (function () {\n    /**\n     * Creates a new `ObservablePoint`\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    function ObservablePoint(cb, scope, x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        this._x = x;\n        this._y = y;\n        this.cb = cb;\n        this.scope = scope;\n    }\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @returns a copy of this observable point\n     */\n    ObservablePoint.prototype.clone = function (cb, scope) {\n        if (cb === void 0) { cb = this.cb; }\n        if (scope === void 0) { scope = this.scope; }\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    };\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    ObservablePoint.prototype.set = function (x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = x; }\n        if (this._x !== x || this._y !== y) {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n        return this;\n    };\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    ObservablePoint.prototype.copyFrom = function (p) {\n        if (this._x !== p.x || this._y !== p.y) {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n        return this;\n    };\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    ObservablePoint.prototype.copyTo = function (p) {\n        p.set(this._x, this._y);\n        return p;\n    };\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    ObservablePoint.prototype.equals = function (p) {\n        return (p.x === this._x) && (p.y === this._y);\n    };\n    ObservablePoint.prototype.toString = function () {\n        return \"[@pixi/math:ObservablePoint x=\" + 0 + \" y=\" + 0 + \" scope=\" + this.scope + \"]\";\n    };\n    Object.defineProperty(ObservablePoint.prototype, \"x\", {\n        /** Position of the observable point on the x axis. */\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            if (this._x !== value) {\n                this._x = value;\n                this.cb.call(this.scope);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservablePoint.prototype, \"y\", {\n        /** Position of the observable point on the y axis. */\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            if (this._y !== value) {\n                this._y = value;\n                this.cb.call(this.scope);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ObservablePoint;\n}());\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof PIXI\n */\nvar Matrix = /** @class */ (function () {\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    function Matrix(a, b, c, d, tx, ty) {\n        if (a === void 0) { a = 1; }\n        if (b === void 0) { b = 0; }\n        if (c === void 0) { c = 0; }\n        if (d === void 0) { d = 1; }\n        if (tx === void 0) { tx = 0; }\n        if (ty === void 0) { ty = 0; }\n        this.array = null;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    Matrix.prototype.fromArray = function (array) {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    };\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.set = function (a, b, c, d, tx, ty) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n        return this;\n    };\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    Matrix.prototype.toArray = function (transpose, out) {\n        if (!this.array) {\n            this.array = new Float32Array(9);\n        }\n        var array = out || this.array;\n        if (transpose) {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n        return array;\n    };\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, transformed through this matrix\n     */\n    Matrix.prototype.apply = function (pos, newPos) {\n        newPos = (newPos || new Point());\n        var x = pos.x;\n        var y = pos.y;\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n        return newPos;\n    };\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    Matrix.prototype.applyInverse = function (pos, newPos) {\n        newPos = (newPos || new Point());\n        var id = 1 / ((this.a * this.d) + (this.c * -this.b));\n        var x = pos.x;\n        var y = pos.y;\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n        return newPos;\n    };\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.translate = function (x, y) {\n        this.tx += x;\n        this.ty += y;\n        return this;\n    };\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.scale = function (x, y) {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n        return this;\n    };\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.rotate = function (angle) {\n        var cos = Math.cos(angle);\n        var sin = Math.sin(angle);\n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n        return this;\n    };\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.append = function (matrix) {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n        return this;\n    };\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n        return this;\n    };\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.prepend = function (matrix) {\n        var tx1 = this.tx;\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n            var a1 = this.a;\n            var c1 = this.c;\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n        return this;\n    };\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    Matrix.prototype.decompose = function (transform) {\n        // sort out rotation / skew..\n        var a = this.a;\n        var b = this.b;\n        var c = this.c;\n        var d = this.d;\n        var pivot = transform.pivot;\n        var skewX = -Math.atan2(-c, d);\n        var skewY = Math.atan2(b, a);\n        var delta = Math.abs(skewX + skewY);\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n        return transform;\n    };\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.invert = function () {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        var tx1 = this.tx;\n        var n = (a1 * d1) - (b1 * c1);\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n        return this;\n    };\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.identity = function () {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n        return this;\n    };\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.clone = function () {\n        var matrix = new Matrix();\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n        return matrix;\n    };\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    Matrix.prototype.copyTo = function (matrix) {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n        return matrix;\n    };\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @returns {PIXI.Matrix} this\n     */\n    Matrix.prototype.copyFrom = function (matrix) {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n        return this;\n    };\n    Matrix.prototype.toString = function () {\n        return \"[@pixi/math:Matrix a=\" + this.a + \" b=\" + this.b + \" c=\" + this.c + \" d=\" + this.d + \" tx=\" + this.tx + \" ty=\" + this.ty + \"]\";\n    };\n    Object.defineProperty(Matrix, \"IDENTITY\", {\n        /**\n         * A default (identity) matrix\n         * @readonly\n         */\n        get: function () {\n            return new Matrix();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Matrix, \"TEMP_MATRIX\", {\n        /**\n         * A temp matrix\n         * @readonly\n         */\n        get: function () {\n            return new Matrix();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Matrix;\n}());\n\n// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\nvar ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nvar uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nvar rotationCayley = [];\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {PIXI.Matrix[]}\n * @private\n */\nvar rotationMatrices = [];\n/*\n * Alias for {@code Math.sign}.\n */\nvar signum = Math.sign;\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init() {\n    for (var i = 0; i < 16; i++) {\n        var row = [];\n        rotationCayley.push(row);\n        for (var j = 0; j < 16; j++) {\n            /* Multiplies rotation matrices i and j. */\n            var _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            var _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            var _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            var _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (var k = 0; k < 16; k++) {\n                if (ux[k] === _ux && uy[k] === _uy\n                    && vx[k] === _vx && vy[k] === _vy) {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n    for (var i = 0; i < 16; i++) {\n        var mat = new Matrix();\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\ninit();\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nvar groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n    /**\n     * Reflection about Y-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n    /**\n     * Reflection about the main diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n    /**\n     * Reflection about X-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n    /**\n     * Reflection about reverse diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: function (ind) { return ux[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: function (ind) { return uy[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: function (ind) { return vx[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: function (ind) { return vy[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: function (rotation) {\n        if (rotation & 8) // true only if between 8 & 15 (reflections)\n         {\n            return rotation & 15; // or rotation % 16\n        }\n        return (-rotation) & 7; // or (8 - rotation) % 8\n    },\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @returns {PIXI.GD8Symmetry} Composed operation\n     */\n    add: function (rotationSecond, rotationFirst) { return (rotationCayley[rotationSecond][rotationFirst]); },\n    /**\n     * Reverse of `add`.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @returns {PIXI.GD8Symmetry} Result\n     */\n    sub: function (rotationSecond, rotationFirst) { return (rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]); },\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: function (rotation) { return rotation ^ 4; },\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: function (rotation) { return (rotation & 3) === 2; },\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: function (dx, dy) {\n        if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n            if (dy >= 0) {\n                return groupD8.S;\n            }\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n            if (dx > 0) {\n                return groupD8.E;\n            }\n            return groupD8.W;\n        }\n        else if (dy > 0) {\n            if (dx > 0) {\n                return groupD8.SE;\n            }\n            return groupD8.SW;\n        }\n        else if (dx > 0) {\n            return groupD8.NE;\n        }\n        return groupD8.NW;\n    },\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: function (matrix, rotation, tx, ty) {\n        if (tx === void 0) { tx = 0; }\n        if (ty === void 0) { ty = 0; }\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        var mat = rotationMatrices[groupD8.inv(rotation)];\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nvar Transform = /** @class */ (function () {\n    function Transform() {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n    /** Called when a value changes. */\n    Transform.prototype.onChange = function () {\n        this._localID++;\n    };\n    /** Called when the skew or the rotation changes. */\n    Transform.prototype.updateSkew = function () {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n        this._localID++;\n    };\n    Transform.prototype.toString = function () {\n        return \"[@pixi/math:Transform \"\n            + (\"position=(\" + this.position.x + \", \" + this.position.y + \") \")\n            + (\"rotation=\" + this.rotation + \" \")\n            + (\"scale=(\" + this.scale.x + \", \" + this.scale.y + \") \")\n            + (\"skew=(\" + this.skew.x + \", \" + this.skew.y + \") \")\n            + \"]\";\n    };\n    /** Updates the local transformation matrix. */\n    Transform.prototype.updateLocalTransform = function () {\n        var lt = this.localTransform;\n        if (this._localID !== this._currentLocalID) {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n            // force an update..\n            this._parentID = -1;\n        }\n    };\n    /**\n     * Updates the local and the world transformation matrices.\n     * @param parentTransform - The parent transform\n     */\n    Transform.prototype.updateTransform = function (parentTransform) {\n        var lt = this.localTransform;\n        if (this._localID !== this._currentLocalID) {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n            // force an update..\n            this._parentID = -1;\n        }\n        if (this._parentID !== parentTransform._worldID) {\n            // concat the parent matrix with the objects transform.\n            var pt = parentTransform.worldTransform;\n            var wt = this.worldTransform;\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n            this._parentID = parentTransform._worldID;\n            // update the id of the transform..\n            this._worldID++;\n        }\n    };\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    Transform.prototype.setFromMatrix = function (matrix) {\n        matrix.decompose(this);\n        this._localID++;\n    };\n    Object.defineProperty(Transform.prototype, \"rotation\", {\n        /** The rotation of the object in radians. */\n        get: function () {\n            return this._rotation;\n        },\n        set: function (value) {\n            if (this._rotation !== value) {\n                this._rotation = value;\n                this.updateSkew();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** A default (identity) transform. */\n    Transform.IDENTITY = new Transform();\n    return Transform;\n}());\n\n\n//# sourceMappingURL=math.mjs.map\n\n\n//# sourceURL=webpack://sv-editor2/./node_modules/@pixi/math/dist/esm/math.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./parser.js");
/******/ 	
/******/ })()
;